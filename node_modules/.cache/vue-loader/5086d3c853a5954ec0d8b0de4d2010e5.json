{"remainingRequest":"/Users/zhuqin.wei/Desktop/yhy/pangSky-console/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhuqin.wei/Desktop/yhy/pangSky-console/src/views/login/resetPassword.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zhuqin.wei/Desktop/yhy/pangSky-console/src/views/login/resetPassword.vue","mtime":1581057012339},{"path":"/Users/zhuqin.wei/Desktop/yhy/pangSky-console/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhuqin.wei/Desktop/yhy/pangSky-console/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zhuqin.wei/Desktop/yhy/pangSky-console/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhuqin.wei/Desktop/yhy/pangSky-console/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nconst levelClass = ['error', 'error', 'warning', 'success']\r\nconst levelColor = ['#ff0000', '#ff0000', '#ff7e05', '#52c41a']\r\nimport {\r\n  checkUsernameIsHave,\r\n  postchangePsd,\r\n  postEmailCode,\r\n  checkEmailCode\r\n} from '@/api/login.js'\r\nexport default {\r\n  name: 'Register',\r\n  data() {\r\n    //这里存放数据\r\n    return {\r\n      form: this.$form.createForm(this),\r\n      state: {\r\n        time: 60,\r\n        smsSendBtn: false,\r\n        passwordLevel: 0,\r\n        passwordLevelChecked: false,\r\n        percent: 10,\r\n        progressColor: '#FF0000'\r\n      },\r\n      // 邮箱码\r\n      codetoken: null,\r\n      // 获取邮箱验证 按钮\r\n      getCodeLoading: false,\r\n      // 按钮文字\r\n      codeText: this.$t('login.getcode'),\r\n      registerBtn: false,\r\n      decorator: {\r\n        username: [\r\n          'username',\r\n          {\r\n            rules: [\r\n              { required: true, message: this.$t('login.inEmail') },\r\n              { validator: this.handleEmail }\r\n            ],\r\n            validateTrigger: ['change', 'blur']\r\n          }\r\n        ],\r\n        code: [\r\n          'code',\r\n          {\r\n            rules: [{ required: true, message: this.$t('login.inCode') }],\r\n            validateTrigger: ['blur']\r\n          }\r\n        ],\r\n        password: [\r\n          'password',\r\n          {\r\n            rules: [\r\n              { required: true, message: this.$t('login.inPwd') },\r\n              { validator: this.handlePasswordLevel }\r\n            ],\r\n            validateTrigger: ['change', 'blur']\r\n          }\r\n        ],\r\n        confirmpassword: [\r\n          'confirmpassword',\r\n          {\r\n            rules: [\r\n              { required: true, message: this.$t('login.inPwd') },\r\n              { validator: this.handlePasswordCheck }\r\n            ],\r\n            validateTrigger: ['change', 'blur']\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  created() {},\r\n  //计算属性 类似于data概念\r\n  computed: {\r\n    passwordLevelClass() {\r\n      return levelClass[this.state.passwordLevel]\r\n    },\r\n    passwordLevelName() {\r\n      const { easy, general, hard } = this.$t('password')\r\n      const levelNames = [easy, easy, general, hard]\r\n      return levelNames[this.state.passwordLevel]\r\n    },\r\n    passwordLevelColor() {\r\n      return levelColor[this.state.passwordLevel]\r\n    }\r\n  },\r\n  // 方法集合\r\n  methods: {\r\n    getEmailCode() {\r\n      const email = this.form.getFieldValue('username')\r\n\r\n      if (this.$utils.isEmail(email)) {\r\n        //判断是否有这个邮箱\r\n        this.getCodeLoading = true\r\n        this.codeText = this.$t('login.spendimg')\r\n        checkUsernameIsHave(email).then(res => {\r\n          if (res.state) {\r\n            if (res.body == 0) {\r\n              this.$confirm({\r\n                title: this.$t('common.warmPrompt'),\r\n                content: this.$t('login.noemail'),\r\n                okText: this.$t('login.goregister'),\r\n                cancelText: this.$t('common.black'),\r\n                onOk: () => {\r\n                  this.$router.push({ name: 'register' })\r\n                }\r\n              })\r\n              this.getCodeLoading = false\r\n              this.codeText = this.$t('login.toSpend')\r\n              return false\r\n            } else {\r\n              this.getCodeLoading = true\r\n              this.codeText = this.$t('login.spendimg')\r\n              postEmailCode({ email: email }).then(res => {\r\n                if (res.state) {\r\n                  this.codeText = 60\r\n                  this.VerificationCode()\r\n                  this.codetoken = res.body\r\n                  this.$notification.success({\r\n                    message: this.$t('common.sendsuccess'),\r\n                  })\r\n                } else {\r\n                  this.$notification.error({\r\n                    message: this.$t('common.error'),\r\n                    description: res.body\r\n                  })\r\n                  this.codeText = this.$t('login.toSpend')\r\n                  this.getCodeLoading = false\r\n                }\r\n              })\r\n            }\r\n          } else {\r\n            this.getCodeLoading = false\r\n            this.codeText = this.$t('login.toSpend')\r\n          }\r\n        })\r\n      } else {\r\n        this.$notification.error({\r\n          message: this.$t('common.error'),\r\n          description: this.$t('login.inputEmail')\r\n        })\r\n      }\r\n    },\r\n    VerificationCode() {\r\n      const _this = this\r\n      // 验证码定时器\r\n      setTimeout(() => {\r\n        if (_this.codeText > 1) {\r\n          _this.codeText--\r\n          _this.VerificationCode()\r\n        } else {\r\n          _this.codeText = this.$t('login.toSpend')\r\n          this.getCodeLoading = false\r\n        }\r\n      }, 1000)\r\n    },\r\n    handlePasswordLevel(rule, value, callback) {\r\n      if (!value) {\r\n        this.state.passwordLevelChecked = false\r\n        callback()\r\n        return false\r\n      }\r\n      if (value.length < 6) {\r\n        this.state.passwordLevelChecked = false\r\n        callback(new Error(this.$t('login.inPwd')))\r\n        return false\r\n      }\r\n      this.state.passwordLevelChecked = true\r\n      // value ? null : callback()\r\n      let level = 0\r\n      // 判断这个字符串中有没有数字\r\n      ;/[0-9]/.test(value) ? level++ : null\r\n      // 判断字符串中有没有字母\r\n      ;/[a-zA-Z]/.test(value) ? level++ : null\r\n      // 判断字符串中有没有特殊符号\r\n      ;/[^0-9a-zA-Z_]/.test(value) ? level++ : null\r\n      this.state.passwordLevel = level\r\n      level >= 3\r\n        ? (this.state.percent = 100)\r\n        : (this.state.percent = level * 30)\r\n      level < 2 ? callback(new Error(this.$t('login.pwdstrengthNo'))) : null\r\n      callback()\r\n    },\r\n    handlePasswordCheck(rule, value, callback) {\r\n      value ? null : callback()\r\n      const password = this.form.getFieldValue('password')\r\n      if (value && password && value.trim() !== password.trim()) {\r\n        callback(new Error(this.$t('login.twoPassworderror')))\r\n      }\r\n      callback()\r\n    },\r\n    handleSubmit(e) {\r\n      e.preventDefault()\r\n\r\n      this.form.validateFields({ force: true }, async (err, values) => {\r\n        if (!err) {\r\n          const data = {\r\n            code: values.code,\r\n            password: values.password,\r\n            secret: this.codetoken\r\n          }\r\n          this.registerBtn = true\r\n          postchangePsd(data).then(resp => {\r\n            this.registerBtn = false\r\n            if (resp.state) {\r\n              this.$notification.success({\r\n                message: this.$t('common.warmPrompt'),\r\n                description: this.$t('login.retetSuccess')\r\n              })\r\n              this.$router.push({ name: 'login' })\r\n            }else{\r\n              this.$notification.error({\r\n                message: this.$t('common.error'),\r\n                description: res.body\r\n              })\r\n            }\r\n          })\r\n        }\r\n      })\r\n    },\r\n    handleEmail(rule, value, callback) {\r\n      value ? null : callback()\r\n      const regex = /^[A-Za-z\\d]+([-_.][A-Za-z\\d]+)*@([A-Za-z\\d]+[-.])+[A-Za-z\\d]{2,4}$/\r\n      if (!regex.test(value)) {\r\n        callback(this.$t('login.inputEmail'))\r\n      }\r\n      callback()\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["resetPassword.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"resetPassword.vue","sourceRoot":"src/views/login","sourcesContent":["<!-- 注册页面 -->\r\n<template>\r\n  <div class=\"mian user-layout-register\">\r\n    <div class=\"title\">\r\n      <span class=\"title-l\">{{ $t('login.changePwd') }} </span>\r\n    </div>\r\n    <a-form ref=\"formRegister\" :form=\"form\" @submit=\"handleSubmit\">\r\n      <a-form-item>\r\n        <a-input\r\n          size=\"large\"\r\n          type=\"text\"\r\n          :placeholder=\"$t('login.email')\"\r\n          v-decorator=\"decorator.username\"\r\n        />\r\n      </a-form-item>\r\n      <a-form-item>\r\n        <a-row :gutter=\"8\">\r\n          <a-col :span=\"14\">\r\n            <a-input\r\n              size=\"large\"\r\n              type=\"text\"\r\n              :placeholder=\"$t('login.verificationcode')\"\r\n              :disabled=\"!codetoken\"\r\n              v-decorator=\"decorator.code\"\r\n            />\r\n          </a-col>\r\n          <a-col :span=\"10\">\r\n            <a-button\r\n              style=\"width:100%\"\r\n              :loading=\"getCodeLoading\"\r\n              type=\"primary\"\r\n              @click=\"getEmailCode\"\r\n              >{{ codeText }}</a-button\r\n            >\r\n          </a-col>\r\n        </a-row>\r\n      </a-form-item>\r\n      <a-popover\r\n        placement=\"rightTop\"\r\n        :trigger=\"['focus']\"\r\n        :getPopupContainer=\"trigger => trigger.parentElement\"\r\n        v-model=\"state.passwordLevelChecked\"\r\n      >\r\n        <template slot=\"content\">\r\n          <div :style=\"{ width: '240px' }\">\r\n            <div :class=\"['user-register', passwordLevelClass]\">\r\n              {{ $t('login.strength') }}：\r\n              <span>{{ passwordLevelName }}</span>\r\n            </div>\r\n            <a-progress\r\n              :percent=\"state.percent\"\r\n              :showInfo=\"false\"\r\n              :strokeColor=\"passwordLevelColor\"\r\n            />\r\n            <div style=\"margin-top: 10px;\">\r\n              <span>{{ $t('login.pwdTip') }}</span>\r\n            </div>\r\n          </div>\r\n        </template>\r\n        <a-form-item>\r\n          <a-input\r\n            size=\"large\"\r\n            type=\"password\"\r\n            autocomplete=\"false\"\r\n            :placeholder=\"$t('login.inPwd')\"\r\n            v-decorator=\"decorator.password\"\r\n          ></a-input>\r\n        </a-form-item>\r\n      </a-popover>\r\n      <a-form-item>\r\n        <a-input\r\n          size=\"large\"\r\n          type=\"password\"\r\n          autocomplete=\"false\"\r\n          :placeholder=\"$t('login.toPwd')\"\r\n          v-decorator=\"decorator.confirmpassword\"\r\n        ></a-input>\r\n      </a-form-item>\r\n      <a-form-item>\r\n        <a-button\r\n          size=\"large\"\r\n          type=\"primary\"\r\n          htmlType=\"submit\"\r\n          class=\"register-button\"\r\n          :loading=\"registerBtn\"\r\n          >{{ $t('login.resetPwd') }}\r\n        </a-button>\r\n        <router-link :to=\"{ name: 'login' }\">\r\n          <a-button size=\"large\" type=\"primary\" class=\"register-button\">\r\n            {{ $t('login.goLoginpage') }}\r\n          </a-button>\r\n        </router-link>\r\n      </a-form-item>\r\n    </a-form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nconst levelClass = ['error', 'error', 'warning', 'success']\r\nconst levelColor = ['#ff0000', '#ff0000', '#ff7e05', '#52c41a']\r\nimport {\r\n  checkUsernameIsHave,\r\n  postchangePsd,\r\n  postEmailCode,\r\n  checkEmailCode\r\n} from '@/api/login.js'\r\nexport default {\r\n  name: 'Register',\r\n  data() {\r\n    //这里存放数据\r\n    return {\r\n      form: this.$form.createForm(this),\r\n      state: {\r\n        time: 60,\r\n        smsSendBtn: false,\r\n        passwordLevel: 0,\r\n        passwordLevelChecked: false,\r\n        percent: 10,\r\n        progressColor: '#FF0000'\r\n      },\r\n      // 邮箱码\r\n      codetoken: null,\r\n      // 获取邮箱验证 按钮\r\n      getCodeLoading: false,\r\n      // 按钮文字\r\n      codeText: this.$t('login.getcode'),\r\n      registerBtn: false,\r\n      decorator: {\r\n        username: [\r\n          'username',\r\n          {\r\n            rules: [\r\n              { required: true, message: this.$t('login.inEmail') },\r\n              { validator: this.handleEmail }\r\n            ],\r\n            validateTrigger: ['change', 'blur']\r\n          }\r\n        ],\r\n        code: [\r\n          'code',\r\n          {\r\n            rules: [{ required: true, message: this.$t('login.inCode') }],\r\n            validateTrigger: ['blur']\r\n          }\r\n        ],\r\n        password: [\r\n          'password',\r\n          {\r\n            rules: [\r\n              { required: true, message: this.$t('login.inPwd') },\r\n              { validator: this.handlePasswordLevel }\r\n            ],\r\n            validateTrigger: ['change', 'blur']\r\n          }\r\n        ],\r\n        confirmpassword: [\r\n          'confirmpassword',\r\n          {\r\n            rules: [\r\n              { required: true, message: this.$t('login.inPwd') },\r\n              { validator: this.handlePasswordCheck }\r\n            ],\r\n            validateTrigger: ['change', 'blur']\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  created() {},\r\n  //计算属性 类似于data概念\r\n  computed: {\r\n    passwordLevelClass() {\r\n      return levelClass[this.state.passwordLevel]\r\n    },\r\n    passwordLevelName() {\r\n      const { easy, general, hard } = this.$t('password')\r\n      const levelNames = [easy, easy, general, hard]\r\n      return levelNames[this.state.passwordLevel]\r\n    },\r\n    passwordLevelColor() {\r\n      return levelColor[this.state.passwordLevel]\r\n    }\r\n  },\r\n  // 方法集合\r\n  methods: {\r\n    getEmailCode() {\r\n      const email = this.form.getFieldValue('username')\r\n\r\n      if (this.$utils.isEmail(email)) {\r\n        //判断是否有这个邮箱\r\n        this.getCodeLoading = true\r\n        this.codeText = this.$t('login.spendimg')\r\n        checkUsernameIsHave(email).then(res => {\r\n          if (res.state) {\r\n            if (res.body == 0) {\r\n              this.$confirm({\r\n                title: this.$t('common.warmPrompt'),\r\n                content: this.$t('login.noemail'),\r\n                okText: this.$t('login.goregister'),\r\n                cancelText: this.$t('common.black'),\r\n                onOk: () => {\r\n                  this.$router.push({ name: 'register' })\r\n                }\r\n              })\r\n              this.getCodeLoading = false\r\n              this.codeText = this.$t('login.toSpend')\r\n              return false\r\n            } else {\r\n              this.getCodeLoading = true\r\n              this.codeText = this.$t('login.spendimg')\r\n              postEmailCode({ email: email }).then(res => {\r\n                if (res.state) {\r\n                  this.codeText = 60\r\n                  this.VerificationCode()\r\n                  this.codetoken = res.body\r\n                  this.$notification.success({\r\n                    message: this.$t('common.sendsuccess'),\r\n                  })\r\n                } else {\r\n                  this.$notification.error({\r\n                    message: this.$t('common.error'),\r\n                    description: res.body\r\n                  })\r\n                  this.codeText = this.$t('login.toSpend')\r\n                  this.getCodeLoading = false\r\n                }\r\n              })\r\n            }\r\n          } else {\r\n            this.getCodeLoading = false\r\n            this.codeText = this.$t('login.toSpend')\r\n          }\r\n        })\r\n      } else {\r\n        this.$notification.error({\r\n          message: this.$t('common.error'),\r\n          description: this.$t('login.inputEmail')\r\n        })\r\n      }\r\n    },\r\n    VerificationCode() {\r\n      const _this = this\r\n      // 验证码定时器\r\n      setTimeout(() => {\r\n        if (_this.codeText > 1) {\r\n          _this.codeText--\r\n          _this.VerificationCode()\r\n        } else {\r\n          _this.codeText = this.$t('login.toSpend')\r\n          this.getCodeLoading = false\r\n        }\r\n      }, 1000)\r\n    },\r\n    handlePasswordLevel(rule, value, callback) {\r\n      if (!value) {\r\n        this.state.passwordLevelChecked = false\r\n        callback()\r\n        return false\r\n      }\r\n      if (value.length < 6) {\r\n        this.state.passwordLevelChecked = false\r\n        callback(new Error(this.$t('login.inPwd')))\r\n        return false\r\n      }\r\n      this.state.passwordLevelChecked = true\r\n      // value ? null : callback()\r\n      let level = 0\r\n      // 判断这个字符串中有没有数字\r\n      ;/[0-9]/.test(value) ? level++ : null\r\n      // 判断字符串中有没有字母\r\n      ;/[a-zA-Z]/.test(value) ? level++ : null\r\n      // 判断字符串中有没有特殊符号\r\n      ;/[^0-9a-zA-Z_]/.test(value) ? level++ : null\r\n      this.state.passwordLevel = level\r\n      level >= 3\r\n        ? (this.state.percent = 100)\r\n        : (this.state.percent = level * 30)\r\n      level < 2 ? callback(new Error(this.$t('login.pwdstrengthNo'))) : null\r\n      callback()\r\n    },\r\n    handlePasswordCheck(rule, value, callback) {\r\n      value ? null : callback()\r\n      const password = this.form.getFieldValue('password')\r\n      if (value && password && value.trim() !== password.trim()) {\r\n        callback(new Error(this.$t('login.twoPassworderror')))\r\n      }\r\n      callback()\r\n    },\r\n    handleSubmit(e) {\r\n      e.preventDefault()\r\n\r\n      this.form.validateFields({ force: true }, async (err, values) => {\r\n        if (!err) {\r\n          const data = {\r\n            code: values.code,\r\n            password: values.password,\r\n            secret: this.codetoken\r\n          }\r\n          this.registerBtn = true\r\n          postchangePsd(data).then(resp => {\r\n            this.registerBtn = false\r\n            if (resp.state) {\r\n              this.$notification.success({\r\n                message: this.$t('common.warmPrompt'),\r\n                description: this.$t('login.retetSuccess')\r\n              })\r\n              this.$router.push({ name: 'login' })\r\n            }else{\r\n              this.$notification.error({\r\n                message: this.$t('common.error'),\r\n                description: res.body\r\n              })\r\n            }\r\n          })\r\n        }\r\n      })\r\n    },\r\n    handleEmail(rule, value, callback) {\r\n      value ? null : callback()\r\n      const regex = /^[A-Za-z\\d]+([-_.][A-Za-z\\d]+)*@([A-Za-z\\d]+[-.])+[A-Za-z\\d]{2,4}$/\r\n      if (!regex.test(value)) {\r\n        callback(this.$t('login.inputEmail'))\r\n      }\r\n      callback()\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style lang=\"less\">\r\n.user-register {\r\n  &.error {\r\n    color: #ff0000;\r\n  }\r\n\r\n  &.warning {\r\n    color: #ff7e05;\r\n  }\r\n\r\n  &.success {\r\n    color: #52c41a;\r\n  }\r\n}\r\n\r\n.user-layout-register {\r\n  .title {\r\n    font-size: 16px;\r\n    font-weight: bold;\r\n    margin: 40px 0;\r\n    color: rgba(0, 0, 0, 0.5);\r\n    .title-l {\r\n      font-size: 20px;\r\n    }\r\n  }\r\n  .ant-input-group-addon:first-child {\r\n    background-color: #fff;\r\n  }\r\n}\r\n</style>\r\n<style lang=\"less\" scoped>\r\n.user-layout-register {\r\n  & > h3 {\r\n    font-size: 16px;\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  .getCaptcha {\r\n    display: block;\r\n    width: 100%;\r\n    height: 40px;\r\n  }\r\n\r\n  .register-button {\r\n    width: 100%;\r\n    font-weight: 400;\r\n    margin-bottom: 20px;\r\n  }\r\n}\r\n</style>\r\n"]}]}