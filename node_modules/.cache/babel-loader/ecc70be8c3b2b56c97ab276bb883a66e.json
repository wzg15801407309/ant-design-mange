{"remainingRequest":"/Users/zhuqin.wei/Desktop/yhy/pangSky-console/node_modules/babel-loader/lib/index.js!/Users/zhuqin.wei/Desktop/yhy/pangSky-console/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/zhuqin.wei/Desktop/yhy/pangSky-console/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhuqin.wei/Desktop/yhy/pangSky-console/src/views/login/Register.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zhuqin.wei/Desktop/yhy/pangSky-console/src/views/login/Register.vue","mtime":1582634015556},{"path":"/Users/zhuqin.wei/Desktop/yhy/pangSky-console/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhuqin.wei/Desktop/yhy/pangSky-console/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zhuqin.wei/Desktop/yhy/pangSky-console/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhuqin.wei/Desktop/yhy/pangSky-console/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/zhuqin.wei/Desktop/yhy/pangSky-console/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/zhuqin.wei/Desktop/yhy/pangSky-console/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.function.name\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar levelClass = ['error', 'error', 'warning', 'success'];\nvar levelColor = ['#ff0000', '#ff0000', '#ff7e05', '#52c41a'];\nimport { checkUsernameIsHave, register, postEmailCode, checkEmailCode, plantformRegidter, getUserInfo, platformLogin, login, postPlantform } from '@/api/login.js';\nimport { mapActions } from 'vuex';\nimport OtherLogin from \"./OtherLogin.vue\";\nexport default {\n  name: 'Register',\n  components: {\n    OtherLogin: OtherLogin\n  },\n  data: function data() {\n    //这里存放数据\n    return {\n      form: this.$form.createForm(this),\n      agree: true,\n      state: {\n        time: 60,\n        smsSendBtn: false,\n        passwordLevel: 0,\n        passwordLevelChecked: false,\n        percent: 10,\n        progressColor: '#FF0000'\n      },\n      // 邮箱码\n      codetoken: null,\n      // 获取邮箱验证 按钮\n      getCodeLoading: false,\n      // 按钮文字\n      codeText: this.$t('login.getcode'),\n      registerBtn: false,\n      email: '',\n      //\n      isbool: true,\n      decorator: {\n        username: ['username', {\n          initialValue: this.$route.query['email'],\n          rules: [{\n            required: true,\n            message: this.$t('login.inEmail')\n          }, {\n            validator: this.handleEmail\n          }],\n          validateTrigger: ['change', 'blur']\n        }],\n        code: ['code', {\n          rules: [{\n            required: true,\n            message: this.$t('login.inCode')\n          }],\n          validateTrigger: ['blur']\n        }],\n        nickname: ['nickname', {\n          initialValue: this.$route.query['name'],\n          rules: [{\n            required: true,\n            message: this.$t('login.innickname')\n          }],\n          validateTrigger: 'blur'\n        }],\n        password: ['password', {\n          rules: [{\n            required: true,\n            message: this.$t('login.inPwd')\n          }, {\n            validator: this.handlePasswordLevel\n          }],\n          validateTrigger: ['change', 'blur']\n        }],\n        confirmpassword: ['confirmpassword', {\n          rules: [{\n            required: true,\n            message: this.$t('login.inPwd')\n          }, {\n            validator: this.handlePasswordCheck\n          }],\n          validateTrigger: ['change', 'blur']\n        }]\n      }\n    };\n  },\n  //计算属性 类似于data概念\n  computed: {\n    passwordLevelClass: function passwordLevelClass() {\n      return levelClass[this.state.passwordLevel];\n    },\n    passwordLevelName: function passwordLevelName() {\n      var _this$$t = this.$t('password'),\n          easy = _this$$t.easy,\n          general = _this$$t.general,\n          hard = _this$$t.hard;\n\n      var levelNames = [easy, easy, general, hard];\n      return levelNames[this.state.passwordLevel];\n    },\n    passwordLevelColor: function passwordLevelColor() {\n      return levelColor[this.state.passwordLevel];\n    }\n  },\n  // 方法集合\n  methods: _objectSpread({}, mapActions(['SetToken', 'SetUserInfo']), {\n    getEmailCode: function getEmailCode() {\n      var _this2 = this;\n\n      var email = this.form.getFieldValue('username');\n\n      if (this.$utils.isEmail(email)) {\n        //判断是否有这个邮箱\n        this.getCodeLoading = true;\n        this.codeText = this.$t('login.spendimg');\n        checkUsernameIsHave(email).then(function (res) {\n          _this2.codeText = _this2.$t('login.getcode');\n          _this2.getCodeLoading = false;\n\n          if (res.state) {\n            var handlename = function handlename(_this) {\n              _this.getCodeLoading = true;\n              _this.codeText = _this.$t('login.spendimg');\n              postEmailCode({\n                email: email\n              }).then(function (res) {\n                if (res.state) {\n                  _this.codeText = 60;\n\n                  _this.VerificationCode();\n\n                  _this.codetoken = res.body;\n\n                  _this.$message.success(_this.$t('common.success'));\n                } else {\n                  _this.$message.error(_this.$t('common.error'));\n\n                  _this.codeText = _this.$t('login.toSpend');\n                  _this.getCodeLoading = false;\n                }\n              });\n            };\n\n            if (res.body != 0) {\n              var type = _this2.$route.query.type;\n              var isbool = Boolean(res.body[\"\".concat(type, \"Id\")]);\n\n              _this2.$confirm({\n                title: _this2.$t('common.warmPrompt'),\n                content: isbool ? _this2.$t('login.emailrepetition') : _this2.$t('common.Ohteremailrepetition'),\n                okText: isbool ? _this2.$t('login.goLoginpage') : _this2.$t('common.Bind'),\n                cancelText: _this2.$t('common.black'),\n                onOk: function onOk() {\n                  if (isbool) {\n                    _this2.$router.push({\n                      name: 'login'\n                    });\n                  } else {\n                    _this2.isbool = false;\n                    handlename(_this2);\n                  }\n                }\n              });\n\n              return false;\n            } else {\n              handlename(_this2);\n            }\n          }\n        });\n      } else {\n        this.$message.error(this.$t('login.inputEmail'));\n      }\n    },\n    VerificationCode: function VerificationCode() {\n      var _this3 = this;\n\n      var _this = this; // 验证码定时器\n\n\n      setTimeout(function () {\n        if (_this.codeText > 1) {\n          _this.codeText--;\n\n          _this.VerificationCode();\n        } else {\n          _this.codeText = _this3.$t('login.toSpend');\n          _this3.getCodeLoading = false;\n        }\n      }, 1000);\n    },\n    handlePasswordLevel: function handlePasswordLevel(rule, value, callback) {\n      if (!value) {\n        this.state.passwordLevelChecked = false;\n        callback();\n        return false;\n      }\n\n      if (value.length < 6) {\n        this.state.passwordLevelChecked = false;\n        callback(new Error(this.$t('login.inPwd')));\n        return false;\n      }\n\n      this.state.passwordLevelChecked = true; // value ? null : callback()\n\n      var level = 0 // 判断这个字符串中有没有数字\n      ;\n      /[0-9]/.test(value) ? level++ : null // 判断字符串中有没有字母\n      ;\n      /[a-zA-Z]/.test(value) ? level++ : null // 判断字符串中有没有特殊符号\n      ;\n      /[^0-9a-zA-Z_]/.test(value) ? level++ : null;\n      this.state.passwordLevel = level;\n      level >= 3 ? this.state.percent = 100 : this.state.percent = level * 30;\n      level < 2 ? callback(new Error(this.$t('login.pwdstrengthNo'))) : null;\n      callback();\n    },\n    handlePasswordCheck: function handlePasswordCheck(rule, value, callback) {\n      value ? null : callback();\n      var password = this.form.getFieldValue('password');\n\n      if (value && password && value.trim() !== password.trim()) {\n        callback(new Error(this.$t('login.twoPassworderror')));\n      }\n\n      callback();\n    },\n    handleSubmit: function handleSubmit(e) {\n      var _this4 = this;\n\n      e.preventDefault();\n      this.form.validateFields({\n        force: true\n      },\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee(err, values) {\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (err) {\n                    _context.next = 4;\n                    break;\n                  }\n\n                  // 判断是否是第三方注册\n                  _this4.registerBtn = true;\n                  checkEmailCode({\n                    code: values.code,\n                    secret: _this4.codetoken\n                  }).then(function (res) {\n                    if (res.state) {\n                      var _this4$$route$query = _this4.$route.query,\n                          type = _this4$$route$query.type,\n                          id = _this4$$route$query.id,\n                          head = _this4$$route$query.head;\n\n                      if (id) {\n                        if (_this4.isbool) {\n                          plantformRegidter({\n                            type: type,\n                            id: id,\n                            values: values,\n                            head: head\n                          }).then(function (resp) {\n                            _this4.registerBtn = false;\n\n                            if (resp.state) {\n                              platformLogin({\n                                plantform: type,\n                                id: id,\n                                email: values.email\n                              }).then(function (res) {\n                                if (res.state) {\n                                  _this4.SetToken(res.body);\n\n                                  getUserInfo().then(function (res) {\n                                    if (res.state) {\n                                      _this4.SetUserInfo(res.body); // 登陆成功\n\n\n                                      _this4.loginSuccess();\n                                    }\n                                  });\n                                }\n                              });\n                            }\n                          });\n                        } else {\n                          postPlantform({\n                            code: values.code,\n                            secret: _this4.codetoken,\n                            email: values.email,\n                            plantformId: id,\n                            plantform: type\n                          }).then(function (res) {\n                            if (res.state) {\n                              platformLogin({\n                                plantform: type,\n                                id: id,\n                                email: values.email\n                              }).then(function (res) {\n                                if (res.state) {\n                                  _this4.SetToken(res.body);\n\n                                  getUserInfo().then(function (res) {\n                                    if (res.state) {\n                                      _this4.SetUserInfo(res.body); // 登陆成功\n\n\n                                      _this4.loginSuccess();\n                                    }\n                                  });\n                                }\n                              });\n                            }\n                          });\n                        }\n                      } else {\n                        register(values).then(function (resp) {\n                          _this4.registerBtn = false;\n\n                          if (resp.state) {\n                            login(values).then(function (res) {\n                              if (res.state) {\n                                _this4.SetToken(res.body);\n\n                                getUserInfo().then(function (res) {\n                                  if (res.state) {\n                                    _this4.SetUserInfo(res.body); // 登陆成功\n\n\n                                    _this4.loginSuccess();\n                                  }\n                                });\n                              } else {\n                                _this4.$message.error(res.body);\n\n                                _this4.loginLoding = false;\n                              }\n                            });\n                          }\n                        });\n                      }\n                    } else {\n                      _this4.registerBtn = false;\n\n                      _this4.$message.error(_this4.$t('login.verificationcodeerror'));\n                    }\n                  });\n                  return _context.abrupt(\"return\", false);\n\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    },\n    loginSuccess: function loginSuccess() {\n      this.$router.push({\n        name: 'index'\n      });\n      this.$notification.success({\n        message: this.$t('login.welcome'),\n        description: \"\".concat(this.$utils.timeFix(this.$t('welcome')), \" \").concat(this.$t('login.welcomeBack'))\n      });\n    },\n    handleEmail: function handleEmail(rule, value, callback) {\n      value ? null : callback();\n      var regex = /^[A-Za-z\\d]+([-_.][A-Za-z\\d]+)*@([A-Za-z\\d]+[-.])+[A-Za-z\\d]{2,4}$/;\n\n      if (!regex.test(value)) {\n        callback(this.$t('login.inputEmail'));\n      }\n\n      callback();\n    }\n  })\n};",{"version":3,"sources":["Register.vue"],"names":[],"mappings":"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","sourcesContent":["<!-- 注册页面 -->\r\n<template>\r\n  <div class=\"mian user-layout-register\">\r\n    <div class=\"title\">\r\n      <a-alert\r\n        v-if=\"this.$route.query['type']\"\r\n        :message=\"$t('login.RegisterAndAssociate')\"\r\n        type=\"warning\"\r\n        style=\"background-color: #eee;border: 1px solid #ccc;\"\r\n      />\r\n      <span class=\"title-l\" v-else>{{ $t('login.registerTitle') }}</span>\r\n    </div>\r\n    <a-form ref=\"formRegister\" :form=\"form\" @submit=\"handleSubmit\">\r\n      <a-form-item>\r\n        <a-input\r\n          size=\"large\"\r\n          type=\"text\"\r\n          :placeholder=\"$t('login.email')\"\r\n          v-decorator=\"decorator.username\"\r\n        />\r\n      </a-form-item>\r\n      <a-form-item>\r\n        <a-row :gutter=\"8\">\r\n          <a-col :span=\"14\">\r\n            <a-input\r\n              size=\"large\"\r\n              type=\"text\"\r\n              :placeholder=\"$t('login.verificationcode')\"\r\n              :disabled=\"!codetoken\"\r\n              v-decorator=\"decorator.code\"\r\n            />\r\n          </a-col>\r\n          <a-col :span=\"10\">\r\n            <a-button\r\n              style=\"width:100%\"\r\n              :loading=\"getCodeLoading\"\r\n              type=\"primary\"\r\n              @click=\"getEmailCode\"\r\n              >{{ codeText }}</a-button\r\n            >\r\n          </a-col>\r\n        </a-row>\r\n      </a-form-item>\r\n      <a-form-item v-if=\"isbool\">\r\n        <a-input\r\n          size=\"large\"\r\n          type=\"text\"\r\n          :placeholder=\"$t('login.nickname')\"\r\n          v-decorator=\"decorator.nickname\"\r\n        ></a-input>\r\n      </a-form-item>\r\n      <a-popover\r\n        v-if=\"isbool\"\r\n        placement=\"rightTop\"\r\n        :trigger=\"['focus']\"\r\n        :getPopupContainer=\"trigger => trigger.parentElement\"\r\n        v-model=\"state.passwordLevelChecked\"\r\n      >\r\n        <template slot=\"content\">\r\n          <div :style=\"{ width: '240px' }\">\r\n            <div :class=\"['user-register', passwordLevelClass]\">\r\n              {{ $t('login.strength') }}：\r\n              <span>{{ passwordLevelName }}</span>\r\n            </div>\r\n            <a-progress\r\n              :percent=\"state.percent\"\r\n              :showInfo=\"false\"\r\n              :strokeColor=\"passwordLevelColor\"\r\n            />\r\n            <div style=\"margin-top: 10px;\">\r\n              <span> {{ $t('login.pwdTip') }}</span>\r\n            </div>\r\n          </div>\r\n        </template>\r\n        <a-form-item>\r\n          <a-input\r\n            size=\"large\"\r\n            type=\"password\"\r\n            autocomplete=\"false\"\r\n            :placeholder=\"$t('login.pwd')\"\r\n            v-decorator=\"decorator.password\"\r\n          ></a-input>\r\n        </a-form-item>\r\n      </a-popover>\r\n      <a-form-item v-if=\"isbool\">\r\n        <a-input\r\n          size=\"large\"\r\n          type=\"password\"\r\n          autocomplete=\"false\"\r\n          :placeholder=\"$t('login.toPwd')\"\r\n          v-decorator=\"decorator.confirmpassword\"\r\n        ></a-input>\r\n      </a-form-item>\r\n      <a-form-item v-if=\"isbool\" style=\"margin-bottom:0;\">\r\n        <a-checkbox v-model=\"agree\">\r\n          {{ $t('login.iagree') }}\r\n          <a\r\n            href=\"/agreement1\"\r\n            class=\"forge-password\"\r\n            target=\"view_window\"\r\n          >\r\n            {{ $t('login.Termsofservice') }}</a\r\n          >\r\n          {{ $t('login.and') }}\r\n          <a\r\n            href=\"/agreement3\"\r\n            class=\"forge-password\"\r\n            target=\"view_window\"\r\n          >\r\n            {{ $t('login.privacypolicy') }}</a\r\n          >\r\n          {{ $t('login.end') }}</a-checkbox\r\n        >\r\n      </a-form-item>\r\n      <a-form-item>\r\n        <a-button\r\n          size=\"large\"\r\n          type=\"primary\"\r\n          htmlType=\"submit\"\r\n          class=\"register-button\"\r\n          :loading=\"registerBtn\"\r\n          :disabled=\"!agree\"\r\n          >{{\r\n            isbool ? $t('login.registerTitle') : $t('common.Bindaccount')\r\n          }}</a-button\r\n        >\r\n\r\n        <router-link :to=\"{ name: 'login' }\">\r\n          <a-button size=\"large\" class=\"register-button\">\r\n            {{ $t('login.goLogin') }}\r\n          </a-button>\r\n        </router-link>\r\n        <OtherLogin />\r\n      </a-form-item>\r\n    </a-form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nconst levelClass = ['error', 'error', 'warning', 'success']\r\nconst levelColor = ['#ff0000', '#ff0000', '#ff7e05', '#52c41a']\r\nimport {\r\n  checkUsernameIsHave,\r\n  register,\r\n  postEmailCode,\r\n  checkEmailCode,\r\n  plantformRegidter,\r\n  getUserInfo,\r\n  platformLogin,\r\n  login,\r\n  postPlantform\r\n} from '@/api/login.js'\r\nimport { mapActions } from 'vuex'\r\nimport OtherLogin from './OtherLogin.vue'\r\nexport default {\r\n  name: 'Register',\r\n  components: {\r\n    OtherLogin\r\n  },\r\n  data() {\r\n    //这里存放数据\r\n    return {\r\n      form: this.$form.createForm(this),\r\n      agree: true,\r\n      state: {\r\n        time: 60,\r\n        smsSendBtn: false,\r\n        passwordLevel: 0,\r\n        passwordLevelChecked: false,\r\n        percent: 10,\r\n        progressColor: '#FF0000'\r\n      },\r\n      // 邮箱码\r\n      codetoken: null,\r\n      // 获取邮箱验证 按钮\r\n      getCodeLoading: false,\r\n      // 按钮文字\r\n      codeText: this.$t('login.getcode'),\r\n      registerBtn: false,\r\n      email: '',\r\n      //\r\n      isbool: true,\r\n      decorator: {\r\n        username: [\r\n          'username',\r\n          {\r\n            initialValue: this.$route.query['email'],\r\n            rules: [\r\n              { required: true, message: this.$t('login.inEmail') },\r\n              { validator: this.handleEmail }\r\n            ],\r\n            validateTrigger: ['change', 'blur']\r\n          }\r\n        ],\r\n        code: [\r\n          'code',\r\n          {\r\n            rules: [{ required: true, message: this.$t('login.inCode') }],\r\n            validateTrigger: ['blur']\r\n          }\r\n        ],\r\n        nickname: [\r\n          'nickname',\r\n          {\r\n            initialValue: this.$route.query['name'],\r\n            rules: [{ required: true, message: this.$t('login.innickname') }],\r\n            validateTrigger: 'blur'\r\n          }\r\n        ],\r\n        password: [\r\n          'password',\r\n          {\r\n            rules: [\r\n              { required: true, message: this.$t('login.inPwd') },\r\n              { validator: this.handlePasswordLevel }\r\n            ],\r\n            validateTrigger: ['change', 'blur']\r\n          }\r\n        ],\r\n        confirmpassword: [\r\n          'confirmpassword',\r\n          {\r\n            rules: [\r\n              { required: true, message: this.$t('login.inPwd') },\r\n              { validator: this.handlePasswordCheck }\r\n            ],\r\n            validateTrigger: ['change', 'blur']\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n\r\n  //计算属性 类似于data概念\r\n  computed: {\r\n    passwordLevelClass() {\r\n      return levelClass[this.state.passwordLevel]\r\n    },\r\n    passwordLevelName() {\r\n      const { easy, general, hard } = this.$t('password')\r\n      const levelNames = [easy, easy, general, hard]\r\n      return levelNames[this.state.passwordLevel]\r\n    },\r\n    passwordLevelColor() {\r\n      return levelColor[this.state.passwordLevel]\r\n    }\r\n  },\r\n  // 方法集合\r\n  methods: {\r\n    ...mapActions(['SetToken', 'SetUserInfo']),\r\n    getEmailCode() {\r\n      const email = this.form.getFieldValue('username')\r\n\r\n      if (this.$utils.isEmail(email)) {\r\n        //判断是否有这个邮箱\r\n        this.getCodeLoading = true\r\n        this.codeText = this.$t('login.spendimg')\r\n        checkUsernameIsHave(email).then(res => {\r\n          this.codeText = this.$t('login.getcode')\r\n          this.getCodeLoading = false\r\n          if (res.state) {\r\n            if (res.body != 0) {\r\n              const { type } = this.$route.query\r\n              const isbool = Boolean(res.body[`${type}Id`])\r\n              this.$confirm({\r\n                title: this.$t('common.warmPrompt'),\r\n                content: isbool\r\n                  ? this.$t('login.emailrepetition')\r\n                  : this.$t('common.Ohteremailrepetition'),\r\n                okText: isbool\r\n                  ? this.$t('login.goLoginpage')\r\n                  : this.$t('common.Bind'),\r\n                cancelText: this.$t('common.black'),\r\n                onOk: () => {\r\n                  if (isbool) {\r\n                    this.$router.push({ name: 'login' })\r\n                  } else {\r\n                    this.isbool = false\r\n                    handlename(this)\r\n                  }\r\n                }\r\n              })\r\n              return false\r\n            } else {\r\n              handlename(this)\r\n            }\r\n            function handlename(_this) {\r\n              _this.getCodeLoading = true\r\n              _this.codeText = _this.$t('login.spendimg')\r\n              postEmailCode({ email }).then(res => {\r\n                if (res.state) {\r\n                  _this.codeText = 60\r\n                  _this.VerificationCode()\r\n                  _this.codetoken = res.body\r\n                  _this.$message.success(_this.$t('common.success'))\r\n                } else {\r\n                  _this.$message.error(_this.$t('common.error'))\r\n                  _this.codeText = _this.$t('login.toSpend')\r\n                  _this.getCodeLoading = false\r\n                }\r\n              })\r\n            }\r\n          }\r\n        })\r\n      } else {\r\n        this.$message.error(this.$t('login.inputEmail'))\r\n      }\r\n    },\r\n    VerificationCode() {\r\n      const _this = this\r\n      // 验证码定时器\r\n      setTimeout(() => {\r\n        if (_this.codeText > 1) {\r\n          _this.codeText--\r\n          _this.VerificationCode()\r\n        } else {\r\n          _this.codeText = this.$t('login.toSpend')\r\n          this.getCodeLoading = false\r\n        }\r\n      }, 1000)\r\n    },\r\n    handlePasswordLevel(rule, value, callback) {\r\n      if (!value) {\r\n        this.state.passwordLevelChecked = false\r\n        callback()\r\n        return false\r\n      }\r\n      if (value.length < 6) {\r\n        this.state.passwordLevelChecked = false\r\n        callback(new Error(this.$t('login.inPwd')))\r\n        return false\r\n      }\r\n      this.state.passwordLevelChecked = true\r\n      // value ? null : callback()\r\n      let level = 0\r\n      // 判断这个字符串中有没有数字\r\n      ;/[0-9]/.test(value) ? level++ : null\r\n      // 判断字符串中有没有字母\r\n      ;/[a-zA-Z]/.test(value) ? level++ : null\r\n      // 判断字符串中有没有特殊符号\r\n      ;/[^0-9a-zA-Z_]/.test(value) ? level++ : null\r\n      this.state.passwordLevel = level\r\n      level >= 3\r\n        ? (this.state.percent = 100)\r\n        : (this.state.percent = level * 30)\r\n      level < 2 ? callback(new Error(this.$t('login.pwdstrengthNo'))) : null\r\n      callback()\r\n    },\r\n    handlePasswordCheck(rule, value, callback) {\r\n      value ? null : callback()\r\n      const password = this.form.getFieldValue('password')\r\n      if (value && password && value.trim() !== password.trim()) {\r\n        callback(new Error(this.$t('login.twoPassworderror')))\r\n      }\r\n      callback()\r\n    },\r\n    handleSubmit(e) {\r\n      e.preventDefault()\r\n      this.form.validateFields({ force: true }, async (err, values) => {\r\n        if (!err) {\r\n          // 判断是否是第三方注册\r\n          this.registerBtn = true\r\n          checkEmailCode({ code: values.code, secret: this.codetoken }).then(\r\n            res => {\r\n              if (res.state) {\r\n                const { type, id, head } = this.$route.query\r\n                if (id) {\r\n                  if (this.isbool) {\r\n                    plantformRegidter({ type, id, values, head }).then(resp => {\r\n                      this.registerBtn = false\r\n                      if (resp.state) {\r\n                        platformLogin({\r\n                          plantform: type,\r\n                          id,\r\n                          email: values.email\r\n                        }).then(res => {\r\n                          if (res.state) {\r\n                            this.SetToken(res.body)\r\n                            getUserInfo().then(res => {\r\n                              if (res.state) {\r\n                                this.SetUserInfo(res.body)\r\n                                // 登陆成功\r\n                                this.loginSuccess()\r\n                              }\r\n                            })\r\n                          }\r\n                        })\r\n                      }\r\n                    })\r\n                  } else {\r\n                    postPlantform({\r\n                      code: values.code,\r\n                      secret: this.codetoken,\r\n                      email: values.email,\r\n                      plantformId: id,\r\n                      plantform: type\r\n                    }).then(res => {\r\n                      if (res.state) {\r\n                        platformLogin({\r\n                          plantform: type,\r\n                          id,\r\n                          email: values.email\r\n                        }).then(res => {\r\n                          if (res.state) {\r\n                            this.SetToken(res.body)\r\n                            getUserInfo().then(res => {\r\n                              if (res.state) {\r\n                                this.SetUserInfo(res.body)\r\n                                // 登陆成功\r\n                                this.loginSuccess()\r\n                              }\r\n                            })\r\n                          }\r\n                        })\r\n                      }\r\n                    })\r\n                  }\r\n                } else {\r\n                  register(values).then(resp => {\r\n                    this.registerBtn = false\r\n                    if (resp.state) {\r\n                      login(values).then(res => {\r\n                        if (res.state) {\r\n                          this.SetToken(res.body)\r\n                          getUserInfo().then(res => {\r\n                            if (res.state) {\r\n                              this.SetUserInfo(res.body)\r\n                              // 登陆成功\r\n                              this.loginSuccess()\r\n                            }\r\n                          })\r\n                        } else {\r\n                          this.$message.error(res.body)\r\n                          this.loginLoding = false\r\n                        }\r\n                      })\r\n                    }\r\n                  })\r\n                }\r\n              } else {\r\n                this.registerBtn = false\r\n                this.$message.error(this.$t('login.verificationcodeerror'))\r\n              }\r\n            }\r\n          )\r\n          return false\r\n        }\r\n      })\r\n    },\r\n    loginSuccess() {\r\n      this.$router.push({ name: 'index' })\r\n      this.$notification.success({\r\n        message: this.$t('login.welcome'),\r\n        description: `${this.$utils.timeFix(this.$t('welcome'))} ${this.$t(\r\n          'login.welcomeBack'\r\n        )}`\r\n      })\r\n    },\r\n    handleEmail(rule, value, callback) {\r\n      value ? null : callback()\r\n      const regex = /^[A-Za-z\\d]+([-_.][A-Za-z\\d]+)*@([A-Za-z\\d]+[-.])+[A-Za-z\\d]{2,4}$/\r\n      if (!regex.test(value)) {\r\n        callback(this.$t('login.inputEmail'))\r\n      }\r\n      callback()\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style lang=\"less\">\r\n.user-register {\r\n  &.error {\r\n    color: #ff0000;\r\n  }\r\n\r\n  &.warning {\r\n    color: #ff7e05;\r\n  }\r\n\r\n  &.success {\r\n    color: #52c41a;\r\n  }\r\n}\r\n\r\n.user-layout-register {\r\n  .title {\r\n    font-size: 16px;\r\n    font-weight: bold;\r\n    margin: 40px 0;\r\n    color: rgba(0, 0, 0, 0.5);\r\n    .title-ll {\r\n      font-size: 12px;\r\n      font-weight: 300;\r\n    }\r\n  }\r\n  .ant-input-group-addon:first-child {\r\n    background-color: #fff;\r\n  }\r\n}\r\n.user-layout-register {\r\n  & > h3 {\r\n    font-size: 16px;\r\n    margin-bottom: 20px;\r\n  }\r\n  .getCaptcha {\r\n    display: block;\r\n    width: 100%;\r\n    height: 40px;\r\n  }\r\n  .register-button {\r\n    width: 100%;\r\n    font-weight: 400;\r\n    margin-bottom: 20px;\r\n  }\r\n}\r\n</style>\r\n"],"sourceRoot":"src/views/login"}]}